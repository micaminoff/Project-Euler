# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# 9.5s
# O(n(logn)), though I might be mistaken. Room for improvement


import time
import math
start_time = time.time()

biggest_tri_num = 1
most_factors = 0
iterator = 2


def get_primes(num):            # Honestly can't remember why this works
    factors = 0
    sqrt = int(math.sqrt(num))
    for i in range(1, sqrt):
        if num % i == 0:
            factors += 2
        if i * i == num:
            factors -= 1
    return factors

while most_factors < 500:
    result = get_primes(biggest_tri_num)
    if result > most_factors:
        most_factors = result
    if most_factors >= 500:
        break
    biggest_tri_num += iterator
    iterator += 1
print(biggest_tri_num, most_factors)
print(time.time() - start_time)
